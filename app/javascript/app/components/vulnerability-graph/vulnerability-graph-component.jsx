import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { COUNTRY_COMPARE_COLORS } from 'data/constants';
import CircularChart from 'components/circular-chart';
import NoContent from 'components/no-content';
import InfoButton from 'components/button/info-button';
import range from 'lodash/range';

import styles from './vulnerability-graph-styles.scss';

class VulnerabilityGraph extends PureComponent {
  // eslint-disable-line react/prefer-stateless-function
  /* eslint-disable react/no-array-index-key */

  handleInfoClick = slug => {
    const { setModalMetadata } = this.props;
    setModalMetadata({
      category: 'Country',
      slugs: [slug],
      open: true
    });
  };

  renderCircular() {
    const { sectionData } = this.props;
    const values = sectionData.data.map(country => {
      if (country.location) {
        return country.value ? Math.floor(country.value * 10) / 10 : 'No data';
      }
      return null;
    });
    return values.filter(value => value != null).length > 0 ? (
      <div className={styles.circularChartContainer}>
        <InfoButton
          className={styles.infoBtn}
          infoOpen={false}
          handleInfoClick={() => this.handleInfoClick(sectionData.slug)}
          square
        />
        {values.map(
          (value, index) =>
            (typeof value === 'number' ? (
              <CircularChart key={index} index={index} value={value} />
            ) : null)
        )}
        <div className={styles.circularChartValues}>
          {values.map(
            (value, index) =>
              (value !== null ? (
                <div
                  key={index}
                  style={{ color: COUNTRY_COMPARE_COLORS[index] }}
                >
                  {typeof value === 'number' ? `${value}%` : 'No data'}
                </div>
              ) : null)
          )}
        </div>
      </div>
    ) : (
      <NoContent message={'Select a country'} className={styles.noContent} />
    );
  }

  renderLine() {
    const { sectionData, inverted } = this.props;
    const values = sectionData.data.map(country => {
      if (country.location) {
        return country.value
          ? (Math.floor(country.value * 100) / 100).toFixed(2)
          : 'No data';
      }
      return null;
    });
    const countriesRiskValue = sectionData.data.map(
      country =>
        (country.value ? parseInt(country.rank.absolute, 10) * 100 : null)
    );
    const maximumCountries = sectionData.maximum;
    const riskAbsoluteValues = countriesRiskValue.map(
      riskValue => riskValue / maximumCountries
    );
    const position = inverted ? 'right' : 'left';
    return values ? (
      <div className={styles.lineChartContainer}>
        <InfoButton
          className={styles.infoBtn}
          infoOpen={false}
          handleInfoClick={() => this.handleInfoClick(sectionData.slug)}
        />
        <div className={styles.riskValue}>
          {values.map((value, index) => (
            <div key={index} style={{ color: COUNTRY_COMPARE_COLORS[index] }}>
              {value}
            </div>
          ))}
        </div>
        <div className={styles.riskMeter}>
          {values.map((value, index) => {
            if (riskAbsoluteValues[index] !== 0) {
              return (
                <div
                  key={index}
                  className={styles.riskMarker}
                  style={{
                    [position]: `${riskAbsoluteValues[index]}%`,
                    backgroundColor: COUNTRY_COMPARE_COLORS[index]
                  }}
                />
              );
            }
            return null;
          })}
          {sectionData.data.length === 1 && (
            <div className={styles.riskAbsoluteValue}>
              <span className={styles.countriesNumber}>Rank</span>{' '}
              {sectionData.data.map(
                country => (country.value ? country.rank.absolute : '---')
              )}
              <span className={styles.countriesNumber}>
                {' '}
                of {maximumCountries} countries
              </span>
            </div>
          )}
          {range(10).map((_, i) => (
            <div
              key={i}
              className={cx(styles.riskTick, styles[`meter-${i + 1}`])}
            />
          ))}
        </div>
      </div>
    ) : (
      <NoContent className={styles.noContent} message={'No data'} />
    );
  }

  renderList() {
    const { sectionData } = this.props;
    return (
      <div className={styles.listContainer}>
        <InfoButton
          className={styles.infoBtn}
          infoOpen={false}
          handleInfoClick={() => this.handleInfoClick(sectionData.slug)}
        />
        <div className={styles.list}>
          {sectionData.data.length ? (
            sectionData.data.map((hazard, index) => (
              <div key={index} className={styles.listElementContainer}>
                <div>{hazard.name}</div>
                {hazard.countryIndex && (
                  <div className={styles.listDotsContainer}>
                    {hazard.countryIndex.map((value, i) => (
                      <span
                        key={i}
                        style={{
                          backgroundColor: COUNTRY_COMPARE_COLORS[value[0]]
                        }}
                        className={styles.listDots}
                      />
                    ))}
                  </div>
                )}
              </div>
            ))
          ) : (
            <NoContent
              key={'no-data'}
              message={'No data'}
              className={styles.noContent}
            />
          )}
        </div>
        <a
          className={styles.learnMore}
          target={'_blank'}
          href={sectionData.metadataUrl}
        >
          Learn More
        </a>
      </div>
    );
  }

  render() {
    const { sectionData } = this.props;
    switch (sectionData.sectionType) {
      case 'CIRCULAR':
        return this.renderCircular();
      case 'LINE':
        return this.renderLine();
      case 'LIST':
        return this.renderList();
      default:
        return null;
    }
  }
}

VulnerabilityGraph.propTypes = {
  sectionData: PropTypes.object,
  setModalMetadata: PropTypes.func.isRequired,
  inverted: PropTypes.bool.isRequired
};

VulnerabilityGraph.defaultProps = {
  inverted: false
};

export default VulnerabilityGraph;
