import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import CircularChart from 'components/circular-chart';
import InfoButton from 'components/button/info-button';
import styles from './vulnerability-graph-styles.scss';

class VulnerabilityGraph extends PureComponent {
  // eslint-disable-line react/prefer-stateless-function

  renderCircular() {
    const { sectionData, countriesCount } = this.props;
    const value =
      sectionData.data && Math.floor(sectionData.data.value * 10) / 10;
    return sectionData.data ? (
      <div className={styles.circularChartContainer}>
        <InfoButton
          className={cx(styles.pullRight, styles.noPadding)}
          infoOpen={false}
          toggleInfo={() => console.info('open')}
        />
        <CircularChart value={value} />
        <div className={styles.absoluteRank}>
          <span>{sectionData.data.rank.absolute}</span>
          <span className={styles.countriesNumber}> of {countriesCount}</span>
        </div>
      </div>
    ) : (
      <div className={styles.noData}>No data</div>
    );
  }

  renderLine() {
    const { sectionData, countriesCount } = this.props;
    const value =
      sectionData.data && Math.floor(sectionData.data.value * 10) / 10;
    const riskValue =
      sectionData.data && parseInt(sectionData.data.rank.absolute, 10) * 100;
    const riskAbsoluteValue = riskValue / countriesCount;
    return sectionData.data ? (
      <div className={styles.lineChartContainer}>
        <InfoButton
          className={[styles.pullRight, styles.noPadding]}
          infoOpen={false}
          toggleInfo={() => console.info('open')}
        />
        <div className={styles.riskValue}>{value}</div>
        <div className={styles.riskMeter}>
          <div
            className={styles.riskMarker}
            style={{ left: `${riskAbsoluteValue}%` }}
          >
            <div className={styles.riskAbsoluteValue}>
              {sectionData.data.rank.absolute}
              <span className={styles.countriesNumber}>
                {' '}
                of {countriesCount}
              </span>
            </div>
          </div>
          {Array(10)
            .fill()
            .map((_, i) => (
              <div
                key={i} // eslint-disable-line react/no-array-index-key
                className={cx(styles.riskTick, styles[`meter-${i + 1}`])}
              />
            ))}
        </div>
      </div>
    ) : (
      <div className={styles.noData}>No data</div>
    );
  }

  renderList() {
    const { sectionData } = this.props;
    return (
      <div className={styles.listContainer}>
        <div className={styles.list}>
          {sectionData.data.map(hazard => <div key={hazard}>{hazard}</div>)}
        </div>
        <div className={styles.learnMore}>Learn More</div>
      </div>
    );
  }

  render() {
    const { sectionData } = this.props;
    switch (sectionData.sectionType) {
      case 'CIRCULAR':
        return this.renderCircular();
      case 'LINE':
        return this.renderLine();
      case 'LIST':
        return this.renderList();
      default:
        return null;
    }
  }
}

VulnerabilityGraph.propTypes = {
  sectionData: PropTypes.object,
  countriesCount: PropTypes.number.isRequired
};

export default VulnerabilityGraph;
