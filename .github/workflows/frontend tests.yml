env:
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres

name: Frontend Tests
on: push

jobs:
  tests:
    name: Frontend Tests
    runs-on: ubuntu-20.04

    services:
      postgres:
        image: postgres:13.3-alpine
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '12'
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get -yqq install libpq-dev build-essential libcurl4-openssl-dev

      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('yarn.lock') }}

      - name: Install Node Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: Setup test database
        env:
          RAILS_ENV: test
          PGHOST: localhost
          PGUSER: ${{ env.POSTGRES_USER }}
          PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}
        run: |
          bin/rails db:drop db:create db:structure:load

      - name: Run tests
        env:
          RAILS_ENV: test
          PGHOST: localhost
          PGUSER: ${{ env.POSTGRES_USER }}
          PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}
          GFW_API: https://staging-api.globalforestwatch.org
          DEV_USER_ID: DEV_USER_ID_PLACEHOLDER
          DEV_USER_TOKEN: DEV_USER_TOKEN_PLACEHOLDER
        run: yarn test
